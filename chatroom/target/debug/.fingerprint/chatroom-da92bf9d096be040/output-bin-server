{"message":"unreachable statement","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/kuangjux/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":2776,"byte_end":2846,"line_start":95,"line_end":97,"column_start":23,"column_end":6,"is_primary":true,"text":[{"text":"    ($($arg:tt)*) => ({","highlight_start":23,"highlight_end":24},{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":1,"highlight_end":63},{"text":"    })","highlight_start":1,"highlight_end":6}],"label":"unreachable statement","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/server/server.rs","byte_start":5598,"byte_end":5644,"line_start":148,"line_end":148,"column_start":9,"column_end":55,"is_primary":false,"text":[{"text":"        println!(\"*********************************\");","highlight_start":9,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"/home/kuangjux/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":2697,"byte_end":2849,"line_start":93,"line_end":98,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! println {","highlight_start":1,"highlight_end":1},{"text":"    () => ($crate::print!(\"\\n\"));","highlight_start":1,"highlight_end":1},{"text":"    ($($arg:tt)*) => ({","highlight_start":1,"highlight_end":1},{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":1,"highlight_end":1},{"text":"    })","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/server/server.rs","byte_start":2248,"byte_end":5558,"line_start":77,"line_end":145,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        loop ","highlight_start":9,"highlight_end":14},{"text":"        {   ","highlight_start":1,"highlight_end":13},{"text":"            // Destruct result from listener.accept()  ","highlight_start":1,"highlight_end":56},{"text":"            // listener.accept() allows us to accept connections to this server","highlight_start":1,"highlight_end":80},{"text":"            // socket: TCP stream ","highlight_start":1,"highlight_end":35},{"text":"            // address: socket address ","highlight_start":1,"highlight_end":40},{"text":"            if let Ok((mut socket, address)) = listener.accept()","highlight_start":1,"highlight_end":65},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                println!(\"Client {}: CONNECTED\", address);","highlight_start":1,"highlight_end":59},{"text":"                // Clone sender","highlight_start":1,"highlight_end":32},{"text":"                // The socket tries to clone it and then push it to clients vector ","highlight_start":1,"highlight_end":84},{"text":"                // We're cloning the socket to push it into our thread ","highlight_start":1,"highlight_end":72},{"text":"                let sender = sender.clone();","highlight_start":1,"highlight_end":45},{"text":"                clients.push(socket.try_clone().expect(\"Failed to clone client\"));","highlight_start":1,"highlight_end":83},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Spawn our thread here with a move closure inside of it ","highlight_start":1,"highlight_end":75},{"text":"                thread::spawn(move || loop ","highlight_start":1,"highlight_end":44},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // Create a mutable buffer ","highlight_start":1,"highlight_end":48},{"text":"                    let mut buffer = vec![0; MESSAGE_SIZE];","highlight_start":1,"highlight_end":60},{"text":"                    // Read our message into our buffer ","highlight_start":1,"highlight_end":57},{"text":"                    match socket.read_exact(&mut buffer) ","highlight_start":1,"highlight_end":58},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        Ok(_) => {","highlight_start":1,"highlight_end":35},{"text":"                            let message = Server::build_message(buffer, address);","highlight_start":1,"highlight_end":82},{"text":"                            // Sent out message through our sender to our receiver","highlight_start":1,"highlight_end":83},{"text":"                            sender.send(message).expect(\"Failed to send message to receiver\");","highlight_start":1,"highlight_end":95},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        /* ","highlight_start":1,"highlight_end":28},{"text":"                        * If the type of error is equal to an error that would block our non-blocking,","highlight_start":1,"highlight_end":103},{"text":"                        * we just send back a unit type. ","highlight_start":1,"highlight_end":58},{"text":"                        */ ","highlight_start":1,"highlight_end":28},{"text":"                        Err(ref err) if err.kind() == ErrorKind::WouldBlock => (),","highlight_start":1,"highlight_end":83},{"text":"                        // If we get an error we don't care about what's inside of it ","highlight_start":1,"highlight_end":87},{"text":"                        // We just close the connection and then we just break out of this loop","highlight_start":1,"highlight_end":96},{"text":"                        Err(_) => ","highlight_start":1,"highlight_end":35},{"text":"                        {","highlight_start":1,"highlight_end":26},{"text":"                            println!(\"Closing connection with: {}\", address);","highlight_start":1,"highlight_end":78},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        } ","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    /*","highlight_start":1,"highlight_end":23},{"text":"                    * Our thread would be constantly looping around and it would be really awkward. ","highlight_start":1,"highlight_end":101},{"text":"                    * Sleep function will allow our loop to sort of rest while it's not receiving messages.","highlight_start":1,"highlight_end":108},{"text":"                    */   ","highlight_start":1,"highlight_end":26},{"text":"                    Server::sleep();","highlight_start":1,"highlight_end":37},{"text":"                }); ","highlight_start":1,"highlight_end":21},{"text":"            } ","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if let Ok(message) = receiver.try_recv() ","highlight_start":1,"highlight_end":54},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                clients = clients.into_iter().filter_map(|mut client| ","highlight_start":1,"highlight_end":71},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    // Set the buffer equal to message that clone into bytes ","highlight_start":1,"highlight_end":78},{"text":"                    // Convert our messages into bytes","highlight_start":1,"highlight_end":55},{"text":"                    let mut buffer = message.clone().into_bytes();","highlight_start":1,"highlight_end":67},{"text":"                    // Resize buffer based on our message size ","highlight_start":1,"highlight_end":64},{"text":"                    buffer.resize(MESSAGE_SIZE, 0);","highlight_start":1,"highlight_end":52},{"text":"                    // Take our client ","highlight_start":1,"highlight_end":40},{"text":"                    // Write all of the entire buffer ","highlight_start":1,"highlight_end":55},{"text":"                    // Map it into our client","highlight_start":1,"highlight_end":46},{"text":"                    // Send it back ","highlight_start":1,"highlight_end":37},{"text":"                    // Collect it all into a vector","highlight_start":1,"highlight_end":52},{"text":"                    client.write_all(&buffer).map(|_| client).ok()","highlight_start":1,"highlight_end":67},{"text":"                }).collect::<Vec<_>>();","highlight_start":1,"highlight_end":40},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Server::sleep();","highlight_start":1,"highlight_end":33},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/server.rs:148:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        loop \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {   \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            // Destruct result from listener.accept()  \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            // listener.accept() allows us to accept connections to this server\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Server::sleep();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        println!(\"*********************************\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable statement\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"constant is never used: `FILE_FAIL`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/server/protocol/mod.rs","byte_start":326,"byte_end":387,"line_start":15,"line_end":15,"column_start":1,"column_end":62,"is_primary":true,"text":[{"text":"pub const FILE_FAIL: &'static str = \"Fail to download file!\";","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constant is never used: `FILE_FAIL`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/server/protocol/mod.rs:15:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub const FILE_FAIL: &'static str = \"Fail to download file!\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
